// FSW Master Control System - Workflow Debugger & Fixer
// This Super Code diagnoses and fixes issues with draft creation and calendar events

// Get input data from previous node
const inputData = $input.all();

// Debug function to analyze data structure
function debugWorkflowData(data) {
    console.log('=== WORKFLOW DEBUGGER STARTED ===');
    console.log('Input Data Type:', typeof data);
    console.log('Input Data Length:', data.length);
    
    // Check if data exists
    if (!data || data.length === 0) {
        return {
            error: 'No input data received',
            suggestion: 'Check if previous node is outputting data correctly',
            fix: 'Ensure the previous node has "Always Output Data" enabled'
        };
    }
    
    // Analyze data structure
    const analysis = {
        totalItems: data.length,
        dataStructure: [],
        issues: [],
        fixes: []
    };
    
    // Check each item in the input
    data.forEach((item, index) => {
        const itemAnalysis = {
            index: index,
            hasJson: !!item.json,
            hasBinary: !!item.binary,
            jsonKeys: item.json ? Object.keys(item.json) : [],
            binaryKeys: item.binary ? Object.keys(item.binary) : []
        };
        
        analysis.dataStructure.push(itemAnalysis);
        
        // Check for common issues
        if (!item.json) {
            analysis.issues.push(`Item ${index}: Missing JSON data`);
            analysis.fixes.push(`Item ${index}: Ensure node outputs JSON format`);
        }
    });
    
    return analysis;
}

// Function to fix and prepare draft email data
function prepareDraftEmail(data) {
    // Extract relevant data from input
    const sourceData = data[0]?.json || {};
    
    // Common fields that might contain email data
    const possibleSubjectFields = ['subject', 'title', 'name', 'summary', 'topic'];
    const possibleBodyFields = ['body', 'content', 'message', 'description', 'text', 'details'];
    const possibleRecipientFields = ['to', 'recipient', 'email', 'contact', 'address'];
    
    // Try to find subject
    let subject = '';
    for (const field of possibleSubjectFields) {
        if (sourceData[field]) {
            subject = sourceData[field];
            break;
        }
    }
    
    // Try to find body
    let body = '';
    for (const field of possibleBodyFields) {
        if (sourceData[field]) {
            body = sourceData[field];
            break;
        }
    }
    
    // Try to find recipient
    let recipient = 'hr@fsw-denver.com'; // Default
    for (const field of possibleRecipientFields) {
        if (sourceData[field]) {
            recipient = sourceData[field];
            break;
        }
    }
    
    // If no subject or body found, create from all available data
    if (!subject) {
        subject = `FSW Master Control - ${dayjs().format('YYYY-MM-DD HH:mm')}`;
    }
    
    if (!body) {
        // Build body from all available data
        body = 'FSW Master Control System Report\n\n';
        body += '=== Data Summary ===\n\n';
        
        for (const [key, value] of Object.entries(sourceData)) {
            if (value && typeof value !== 'object') {
                body += `${key}: ${value}\n`;
            } else if (value && typeof value === 'object') {
                body += `${key}: ${JSON.stringify(value, null, 2)}\n`;
            }
        }
        
        body += '\n--- Generated by FSW Master Control System ---';
    }
    
    // Format the email properly
    const formattedEmail = {
        to: recipient,
        subject: subject,
        body: body,
        cc: 'admin@fsw-denver.com',
        importance: 'normal',
        category: 'FSW Master Control',
        saveAsDraft: true,
        html: convertToHtml(body)
    };
    
    return formattedEmail;
}

// Function to prepare calendar event data
function prepareCalendarEvent(data) {
    const sourceData = data[0]?.json || {};
    
    // Try to extract event details
    const title = sourceData.title || 
                 sourceData.subject || 
                 sourceData.event || 
                 sourceData.name || 
                 'FSW Event';
    
    const description = sourceData.description || 
                       sourceData.details || 
                       sourceData.body || 
                       sourceData.content || 
                       'Event created by FSW Master Control System';
    
    // Parse dates
    const startDate = parseEventDate(sourceData.start || sourceData.startDate || sourceData.date);
    const endDate = parseEventDate(sourceData.end || sourceData.endDate) || dayjs(startDate).add(1, 'hour').toISOString();
    
    const location = sourceData.location || 
                    sourceData.venue || 
                    sourceData.address || 
                    '5353 Joliet St, Denver, CO 80239';
    
    const attendees = parseAttendees(sourceData.attendees || sourceData.participants || sourceData.to);
    
    // Create properly formatted calendar event
    const calendarEvent = {
        summary: title,
        description: description,
        start: {
            dateTime: startDate,
            timeZone: 'America/Denver'
        },
        end: {
            dateTime: endDate,
            timeZone: 'America/Denver'
        },
        location: location,
        attendees: attendees,
        reminders: {
            useDefault: false,
            overrides: [
                { method: 'email', minutes: 24 * 60 }, // 1 day before
                { method: 'popup', minutes: 30 } // 30 minutes before
            ]
        },
        colorId: '11', // Red color for FSW events
        status: 'confirmed',
        visibility: 'private'
    };
    
    return calendarEvent;
}

// Helper function to parse dates
function parseEventDate(dateInput) {
    if (!dateInput) {
        // Default to tomorrow at 9 AM if no date provided
        return dayjs().add(1, 'day').hour(9).minute(0).second(0).toISOString();
    }
    
    // Try to parse the date
    const parsed = dayjs(dateInput);
    if (parsed.isValid()) {
        return parsed.toISOString();
    }
    
    // If parsing fails, return tomorrow at 9 AM
    return dayjs().add(1, 'day').hour(9).minute(0).second(0).toISOString();
}

// Helper function to parse attendees
function parseAttendees(attendeesInput) {
    const attendeesList = [];
    
    if (!attendeesInput) {
        // Default attendees
        attendeesList.push({ email: 'hr@fsw-denver.com' });
        return attendeesList;
    }
    
    if (typeof attendeesInput === 'string') {
        // Split by common delimiters
        const emails = attendeesInput.split(/[,;|\n]/);
        emails.forEach(email => {
            const trimmed = email.trim();
            if (trimmed && trimmed.includes('@')) {
                attendeesList.push({ email: trimmed });
            }
        });
    } else if (Array.isArray(attendeesInput)) {
        attendeesInput.forEach(attendee => {
            if (typeof attendee === 'string' && attendee.includes('@')) {
                attendeesList.push({ email: attendee });
            } else if (attendee.email) {
                attendeesList.push({ email: attendee.email });
            }
        });
    }
    
    // Ensure at least one attendee
    if (attendeesList.length === 0) {
        attendeesList.push({ email: 'hr@fsw-denver.com' });
    }
    
    return attendeesList;
}

// Helper function to convert text to HTML
function convertToHtml(text) {
    if (!text) return '';
    
    // Convert line breaks to <br>
    let html = text.replace(/\n/g, '<br>');
    
    // Convert headers
    html = html.replace(/===(.*?)===/g, '<h3>$1</h3>');
    html = html.replace(/---(.*?)---/g, '<hr><p>$1</p>');
    
    // Add basic HTML structure
    html = `
    <html>
    <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
        <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
            <div style="background: #2c3e50; color: white; padding: 20px; text-align: center;">
                <h2>Flawless Steel Welding</h2>
                <p>Master Control System Notification</p>
            </div>
            <div style="padding: 20px; background: #f9f9f9;">
                ${html}
            </div>
            <div style="background: #34495e; color: white; padding: 10px; text-align: center; font-size: 12px;">
                5353 Joliet St, Denver, CO 80239 | (720) 638-7289
            </div>
        </div>
    </body>
    </html>
    `;
    
    return html;
}

// Function to validate and fix workflow configuration
function validateWorkflowConfig() {
    const config = {
        issues: [],
        recommendations: [],
        requiredNodes: [
            'Trigger (Webhook/Schedule)',
            'Data Source (Database/API)',
            'Super Code (Data Processing)',
            'Email Node (Draft Creation)',
            'Calendar Node (Event Creation)'
        ]
    };
    
    // Check if we're receiving proper data format
    if (!$input.all || typeof $input.all !== 'function') {
        config.issues.push('Input method not available - check n8n version');
    }
    
    // Provide recommendations
    config.recommendations.push('Ensure all nodes have "Always Output Data" enabled');
    config.recommendations.push('Check that Email node is configured with proper credentials');
    config.recommendations.push('Verify Calendar node has API access configured');
    config.recommendations.push('Test each node individually before running full workflow');
    
    return config;
}

// Main execution
try {
    // Debug the incoming data
    const debugInfo = debugWorkflowData(inputData);
    
    // Validate workflow configuration
    const configValidation = validateWorkflowConfig();
    
    // Prepare email draft data
    const emailData = prepareDraftEmail(inputData);
    
    // Prepare calendar event data
    const calendarData = prepareCalendarEvent(inputData);
    
    // Create comprehensive output
    const output = {
        success: true,
        debug: {
            inputAnalysis: debugInfo,
            workflowValidation: configValidation,
            dataReceived: inputData.length > 0,
            firstItemKeys: inputData[0]?.json ? Object.keys(inputData[0].json) : []
        },
        email: emailData,
        calendar: calendarData,
        fixes: {
            applied: [
                'Added default values for missing fields',
                'Formatted data for email draft',
                'Prepared calendar event structure',
                'Added HTML formatting for email'
            ],
            recommendations: [
                'Connect this node output to Email node for draft creation',
                'Connect this node output to Calendar node for event creation',
                'Use $.email for email data and $.calendar for calendar data'
            ]
        },
        metadata: {
            processedAt: dayjs().format('YYYY-MM-DD HH:mm:ss'),
            processor: 'FSW Workflow Debugger v1.0',
            itemsProcessed: inputData.length
        }
    };
    
    // Return both email and calendar data
    return [
        {
            json: output,
            pairedItem: 0
        }
    ];
    
} catch (error) {
    // Error handling with detailed information
    return [
        {
            json: {
                error: true,
                message: error.message,
                stack: error.stack,
                suggestion: 'Check node connections and data format',
                fallback: {
                    email: {
                        to: 'hr@fsw-denver.com',
                        subject: 'FSW Master Control - Error Report',
                        body: `An error occurred in the workflow:\n\n${error.message}\n\nPlease check the workflow configuration.`
                    },
                    calendar: {
                        summary: 'FSW Workflow Error - Review Required',
                        description: `Error: ${error.message}`,
                        start: {
                            dateTime: dayjs().add(1, 'hour').toISOString(),
                            timeZone: 'America/Denver'
                        },
                        end: {
                            dateTime: dayjs().add(2, 'hour').toISOString(),
                            timeZone: 'America/Denver'
                        }
                    }
                }
            },
            pairedItem: 0
        }
    ];
}
